<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
 
	<bean id="mysqldbDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="false">
		<property name="driverClass">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbcUrl}</value>
		</property>
		<property name="user">
			<value>${user}</value>
		</property>
		<property name="password">
			<value>${password}</value>
		</property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
		<value>2</value>
		</property>
		<property name="initialPoolSize">
		<value>2</value>
		</property>
		<property name="minPoolSize">
		<value>1</value>
		</property>
		<property name="maxPoolSize">
		<value>5</value>
		</property>
		<!-- 
		<property name="autoCommitOnClose">
		<value>false</value>
		</property>
		 -->
		<!-- 最大空闲时间,定义时间内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
		<value>10000</value>
		</property>
	</bean>
	<!---->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="com.youshusoft.mapper"/>
	</bean>
	  
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mysqldbDataSource" />
		<!-- <property name="mapperLocations" value="classpath:com/youshusoft/mapper/*.xml"></property> -->
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	    <constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysqldbDataSource" />
	</bean>
	<bean class="com.github.abel533.mapperhelper.MapperHelper"
        depends-on="sqlSession" init-method="initMapper" scope="singleton" lazy-init="false">
	    <property name="mappers">
	        <array>
	            <!-- 可以配置多个 -->
	            <value>com.youshusoft.mapper.UserMapper</value>
	        </array>
	    </property>
	    <!-- 对于多数据源，这里也可以像上面这样配置多个 -->
	    <property name="sqlSessions" ref="sqlSession"/>
	</bean>
	<bean class="com.youshusoft.other.InstantiationProcessor"></bean>

	<!-- 通知 -->
    <tx:advice id="tx"
        transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="select*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc" expression="execution(* cn.youshusoft.service.*.*(..))" />
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc" advice-ref="tx" />
    </aop:config>
	<!-- 
	<bean id="mysqldbSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="bus/spring/ibatis/sqlmapConfig.xml"/>
		<property name="mappingLocations">  
	        <value>classpath:/com/wds/game/sqlmap/*.xml</value>  
	    </property>
		<property name="dataSource" ref="mysqldbDataSource"/>
	</bean>
	
	
	<bean id="mysqldbIbatisDaoSupport" class="com.wds.base.dao.delegate.IbatisDaoSupport">
		<property name="sqlMapClient" ref="mysqldbSqlMapClient" />
	</bean>
	
	
	<bean id="directDao" class="com.wds.base.dao.delegate.DefaultBatisDao">
		<property name="daoSupport" ref="mysqldbIbatisDaoSupport" />
	</bean>
	
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysqldbDataSource" />
	</bean>
	
	<bean id="autoMultiHandler" class="com.wds.kernel.message.entity.handler.AutoMultiHandler" lazy-init="false"/>

	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
 	<aop:aspectj-autoproxy proxy-target-class="true" />
 	<aop:config proxy-target-class="true" />
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="baseServiceOperation"
			expression="execution(* com.wds.kernel.message.entity.handler.AutoMultiHandler.handleReqToResInternal(..))" /> 
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="baseServiceOperation" />
			
		<aop:aspect id="TestAspect" ref="sqlAspect">  
			<aop:pointcut id="sqlDaoOperation"
				expression="execution(* com.wds.base.dao.delegate.IbatisDao.*(..))" />             
			<aop:after pointcut-ref="sqlDaoOperation" method="doAfter"/>  
		</aop:aspect>
	</aop:config>
	
	<bean id="sqlAspect" class="com.wds.base.dao.delegate.SQLAspect" />
	 -->
	
</beans>